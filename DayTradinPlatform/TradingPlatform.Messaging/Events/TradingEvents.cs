using System;
using System.Collections.Generic;
using TradingPlatform.Core.Models;

namespace TradingPlatform.Messaging.Events
{
    /// <summary>
    /// Base class for all trading events
    /// </summary>
    public abstract record TradingEvent
    {
        public string EventId { get; init; } = Guid.NewGuid().ToString();
        public DateTime Timestamp { get; init; } = DateTime.UtcNow;
        public string Source { get; init; } = string.Empty;
        public string CorrelationId { get; init; } = string.Empty;
        public abstract string EventType { get; }
    }

    #region Market Data Events

    /// <summary>
    /// Market data update event
    /// </summary>
    public record MarketDataEvent : TradingEvent
    {
        public override string EventType => "MarketData";
        public string Symbol { get; init; } = string.Empty;
        public decimal Price { get; init; }
        public decimal Bid { get; init; }
        public decimal Ask { get; init; }
        public decimal Volume { get; init; }
        public decimal High { get; init; }
        public decimal Low { get; init; }
        public MarketDataType DataType { get; init; }
    }

    /// <summary>
    /// Level 2 market depth update
    /// </summary>
    public record MarketDepthEvent : TradingEvent
    {
        public override string EventType => "MarketDepth";
        public string Symbol { get; init; } = string.Empty;
        public List<PriceLevel> Bids { get; init; } = new();
        public List<PriceLevel> Asks { get; init; } = new();
    }

    /// <summary>
    /// Trade execution in the market
    /// </summary>
    public record MarketTradeEvent : TradingEvent
    {
        public override string EventType => "MarketTrade";
        public string Symbol { get; init; } = string.Empty;
        public decimal Price { get; init; }
        public decimal Quantity { get; init; }
        public string Side { get; init; } = string.Empty;
        public string Exchange { get; init; } = string.Empty;
    }

    #endregion

    #region Order Events

    /// <summary>
    /// Order submission event
    /// </summary>
    public record OrderEvent : TradingEvent
    {
        public override string EventType => "Order";
        public string OrderId { get; init; } = string.Empty;
        public string Symbol { get; init; } = string.Empty;
        public OrderAction Action { get; init; }
        public OrderStatus Status { get; init; }
        public decimal Quantity { get; init; }
        public decimal Price { get; init; }
        public string OrderType { get; init; } = string.Empty;
        public string Side { get; init; } = string.Empty;
        public string? RejectReason { get; init; }
    }

    /// <summary>
    /// Order fill/execution event
    /// </summary>
    public record FillEvent : TradingEvent
    {
        public override string EventType => "Fill";
        public string OrderId { get; init; } = string.Empty;
        public string FillId { get; init; } = string.Empty;
        public string Symbol { get; init; } = string.Empty;
        public decimal Quantity { get; init; }
        public decimal Price { get; init; }
        public decimal Commission { get; init; }
        public string Side { get; init; } = string.Empty;
        public bool IsPartial { get; init; }
    }

    #endregion

    #region Position Events

    /// <summary>
    /// Position update event
    /// </summary>
    public record PositionEvent : TradingEvent
    {
        public override string EventType => "Position";
        public string Symbol { get; init; } = string.Empty;
        public decimal Quantity { get; init; }
        public decimal AveragePrice { get; init; }
        public decimal CurrentPrice { get; init; }
        public decimal UnrealizedPnL { get; init; }
        public decimal RealizedPnL { get; init; }
        public PositionAction Action { get; init; }
    }

    #endregion

    #region Strategy Events

    /// <summary>
    /// Trading signal generated by strategy
    /// </summary>
    public record SignalEvent : TradingEvent
    {
        public override string EventType => "Signal";
        public string SignalId { get; init; } = string.Empty;
        public string StrategyId { get; init; } = string.Empty;
        public string Symbol { get; init; } = string.Empty;
        public string SignalType { get; init; } = string.Empty;
        public decimal Price { get; init; }
        public decimal Quantity { get; init; }
        public decimal Confidence { get; init; }
        public string Reason { get; init; } = string.Empty;
    }

    /// <summary>
    /// Strategy state change event
    /// </summary>
    public record StrategyEvent : TradingEvent
    {
        public override string EventType => "Strategy";
        public string StrategyId { get; init; } = string.Empty;
        public string StrategyName { get; init; } = string.Empty;
        public StrategyAction Action { get; init; }
        public string Status { get; init; } = string.Empty;
        public Dictionary<string, object> Parameters { get; init; } = new();
    }

    #endregion

    #region Risk Events

    /// <summary>
    /// Risk alert event
    /// </summary>
    public record RiskEvent : TradingEvent
    {
        public override string EventType => "Risk";
        public string AlertId { get; init; } = string.Empty;
        public RiskAlertType AlertType { get; init; }
        public string Symbol { get; init; } = string.Empty;
        public string Message { get; init; } = string.Empty;
        public RiskSeverity Severity { get; init; }
        public Dictionary<string, decimal> Metrics { get; init; } = new();
    }

    /// <summary>
    /// Risk limit breach event
    /// </summary>
    public record RiskLimitEvent : TradingEvent
    {
        public override string EventType => "RiskLimit";
        public string LimitType { get; init; } = string.Empty;
        public string Symbol { get; init; } = string.Empty;
        public decimal CurrentValue { get; init; }
        public decimal LimitValue { get; init; }
        public string Action { get; init; } = string.Empty;
    }

    #endregion

    #region System Events

    /// <summary>
    /// System health event
    /// </summary>
    public record SystemEvent : TradingEvent
    {
        public override string EventType => "System";
        public string Component { get; init; } = string.Empty;
        public SystemEventType SystemEventType { get; init; }
        public string Status { get; init; } = string.Empty;
        public string Message { get; init; } = string.Empty;
        public Dictionary<string, object> Metrics { get; init; } = new();
    }

    /// <summary>
    /// Service lifecycle event
    /// </summary>
    public record ServiceEvent : TradingEvent
    {
        public override string EventType => "Service";
        public string ServiceName { get; init; } = string.Empty;
        public ServiceAction Action { get; init; }
        public string State { get; init; } = string.Empty;
        public TimeSpan? Uptime { get; init; }
    }

    #endregion

    #region Enumerations

    public enum MarketDataType
    {
        Quote,
        Trade,
        Bar,
        Tick
    }

    public enum OrderAction
    {
        Submitted,
        Accepted,
        Rejected,
        Cancelled,
        Filled,
        PartiallyFilled
    }

    public enum OrderStatus
    {
        New,
        PendingSubmit,
        Submitted,
        Accepted,
        Rejected,
        PartiallyFilled,
        Filled,
        Cancelled,
        Expired
    }

    public enum PositionAction
    {
        Opened,
        Increased,
        Reduced,
        Closed,
        Updated
    }

    public enum StrategyAction
    {
        Started,
        Stopped,
        Paused,
        Resumed,
        ParametersUpdated,
        Error
    }

    public enum RiskAlertType
    {
        DrawdownLimit,
        PositionLimit,
        DailyLossLimit,
        ConcentrationLimit,
        MarginCall,
        ComplianceViolation,
        SystemRisk
    }

    public enum RiskSeverity
    {
        Info,
        Warning,
        Critical,
        Emergency
    }

    public enum SystemEventType
    {
        Started,
        Stopped,
        HealthCheck,
        Error,
        Warning,
        Performance
    }

    public enum ServiceAction
    {
        Starting,
        Started,
        Stopping,
        Stopped,
        HealthCheck,
        Error
    }

    #endregion

    #region Supporting Types

    /// <summary>
    /// Price level for market depth
    /// </summary>
    public record PriceLevel(decimal Price, decimal Quantity, int Orders);

    #endregion
}