using TradingPlatform.Core.Models;

namespace TradingPlatform.StrategyEngine.Models;

/// <summary>
/// Trading signal request for manual execution
/// </summary>
public record SignalRequest(
    string StrategyId,
    string Symbol,
    SignalType SignalType,
    decimal Price,
    int Quantity,
    string Reason,
    Dictionary<string, object>? Metadata = null);

/// <summary>
/// Strategy execution result
/// </summary>
public record StrategyResult(
    bool Success,
    string Message,
    string? ErrorCode = null,
    Dictionary<string, object>? Data = null);

/// <summary>
/// Trading signal generated by strategy
/// </summary>
public record TradingSignal(
    string Id,
    string StrategyId,
    string Symbol,
    SignalType SignalType,
    decimal Price,
    int Quantity,
    decimal Confidence,
    string Reason,
    DateTimeOffset CreatedAt,
    Dictionary<string, object>? Metadata = null);

/// <summary>
/// Strategy information and status
/// </summary>
public record StrategyInfo(
    string Id,
    string Name,
    StrategyStatus Status,
    DateTimeOffset StartedAt,
    decimal PnL,
    int TradeCount,
    Dictionary<string, object>? Parameters = null);

/// <summary>
/// Strategy performance metrics
/// </summary>
public record StrategyPerformance(
    string StrategyId,
    decimal TotalPnL,
    decimal UnrealizedPnL,
    int TotalTrades,
    int WinningTrades,
    int LosingTrades,
    decimal WinRate,
    decimal SharpeRatio,
    decimal MaxDrawdown,
    TimeSpan ActiveDuration,
    DateTimeOffset LastUpdate);

/// <summary>
/// Strategy execution metrics
/// </summary>
public record ExecutionMetrics(
    long SignalsProcessed,
    TimeSpan AverageExecutionTime,
    TimeSpan MaxExecutionTime,
    int ActiveStrategies,
    long TotalExecutions,
    TimeSpan Uptime,
    DateTimeOffset LastMetricsUpdate);

/// <summary>
/// Strategy engine health status
/// </summary>
public record StrategyHealthStatus(
    bool IsHealthy,
    string Status,
    int ActiveStrategies,
    long RecentSignals,
    TimeSpan AverageLatency,
    DateTime LastExecution,
    string[] Issues);

/// <summary>
/// Market conditions assessment
/// </summary>
public record MarketConditions(
    string Symbol,
    decimal Volatility,
    decimal Volume,
    decimal PriceChange,
    TrendDirection Trend,
    decimal RSI,
    decimal MACD,
    DateTimeOffset Timestamp);

/// <summary>
/// Risk assessment for strategy execution
/// </summary>
public record RiskAssessment(
    decimal MaxPositionSize,
    decimal StopLoss,
    decimal TakeProfit,
    decimal RiskReward,
    decimal PortfolioRisk,
    bool IsAcceptable);

// Enums for strategy modeling
public enum SignalType
{
    Buy,
    Sell,
    Hold,
    StopLoss,
    TakeProfit
}

public enum StrategyStatus
{
    Stopped,
    Starting,
    Running,
    Paused,
    Stopping,
    Error
}

public enum TrendDirection
{
    Up,
    Down,
    Sideways,
    Unknown
}

/// <summary>
/// Strategy configuration parameters
/// </summary>
public record StrategyConfig(
    string StrategyId,
    string Name,
    bool IsEnabled,
    Dictionary<string, object> Parameters,
    RiskLimits RiskLimits,
    string[] Symbols);

/// <summary>
/// Risk limits for strategy execution
/// </summary>
public record RiskLimits(
    decimal MaxPositionSize,
    decimal MaxDailyLoss,
    decimal MaxPortfolioRisk,
    int MaxOpenPositions,
    decimal StopLossPercentage);